<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="Atk" version="1.0"/>
  <include name="GLib" version="2.0"/>
  <include name="GModule" version="2.0"/>
  <include name="GObject" version="2.0"/>
  <include name="Gda" version="5.0"/>
  <include name="Gdk" version="3.0"/>
  <include name="GdkPixbuf" version="2.0"/>
  <include name="Gimo" version="1.0"/>
  <include name="Gio" version="2.0"/>
  <include name="Gtk" version="3.0"/>
  <include name="Oren" version="1.0"/>
  <include name="Pango" version="1.0"/>
  <include name="cairo" version="1.0"/>
  <include name="libxml2" version="2.0"/>
  <package name="UU-1.0"/>
  <namespace name="UU"
             version="1.0"
             shared-library="uutk.dll"
             c:identifier-prefixes="UU"
             c:symbol-prefixes="uu">
    <record name="DecoratorButton" c:type="UUDecoratorButton" disguised="1">
    </record>
    <record name="DecoratorWidget" c:type="UUDecoratorWidget" disguised="1">
    </record>
    <class name="ResourceManager"
           c:symbol-prefix="resource_manager"
           c:type="UUResourceManager"
           parent="GObject.Object"
           glib:type-name="UUResourceManager"
           glib:get-type="uu_resource_manager_get_type"
           glib:type-struct="ResourceManagerClass">
      <constructor name="new" c:identifier="uu_resource_manager_new">
        <return-value transfer-ownership="full">
          <type name="ResourceManager" c:type="UUResourceManager*"/>
        </return-value>
        <parameters>
          <parameter name="database" transfer-ownership="none">
            <type name="Gda.Connection" c:type="GdaConnection*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_image"
              c:identifier="uu_resource_manager_get_image"
              throws="1">
        <doc xml:whitespace="preserve">Get an image from the database.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GdkPixbuf</doc>
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:whitespace="preserve">the image name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="database"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Gda.Connection"/>
      </property>
      <property name="refdb"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="ResourceManagerPrivate"
              c:type="UUResourceManagerPrivate*"/>
      </field>
    </class>
    <record name="ResourceManagerClass"
            c:type="UUResourceManagerClass"
            glib:is-gtype-struct-for="ResourceManager">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="ResourceManagerPrivate"
            c:type="UUResourceManagerPrivate"
            disguised="1">
    </record>
    <class name="Win32EmbedWidget"
           c:symbol-prefix="win32_embed_widget"
           c:type="UUWin32EmbedWidget"
           parent="Gtk.Window"
           glib:type-name="UUWin32EmbedWidget"
           glib:get-type="uu_win32_embed_widget_get_type"
           glib:type-struct="Win32EmbedWidgetClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="uu_win32_embed_widget_new">
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="host_hwnd" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </constructor>
      <property name="host-hwnd"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="guint"/>
      </property>
      <field name="window">
        <type name="Gtk.Window" c:type="GtkWindow"/>
      </field>
      <field name="priv">
        <type name="Win32EmbedWidgetPrivate"
              c:type="UUWin32EmbedWidgetPrivate*"/>
      </field>
    </class>
    <record name="Win32EmbedWidgetClass"
            c:type="UUWin32EmbedWidgetClass"
            glib:is-gtype-struct-for="Win32EmbedWidget">
      <field name="parent_class">
        <type name="Gtk.WindowClass" c:type="GtkWindowClass"/>
      </field>
    </record>
    <record name="Win32EmbedWidgetPrivate"
            c:type="UUWin32EmbedWidgetPrivate"
            disguised="1">
    </record>
    <class name="Win32HostWidget"
           c:symbol-prefix="win32_host_widget"
           c:type="UUWin32HostWidget"
           parent="Gtk.Window"
           glib:type-name="UUWin32HostWidget"
           glib:get-type="uu_win32_host_widget_get_type"
           glib:type-struct="Win32HostWidgetClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="uu_win32_host_widget_new">
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <virtual-method name="embed_close">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </virtual-method>
      <method name="load" c:identifier="uu_win32_host_widget_load">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="application" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="command_line" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <field name="window">
        <type name="Gtk.Window" c:type="GtkWindow"/>
      </field>
      <field name="priv">
        <type name="Win32HostWidgetPrivate"
              c:type="UUWin32HostWidgetPrivate*"/>
      </field>
      <glib:signal name="embed-close" when="first">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="Win32HostWidgetClass"
            c:type="UUWin32HostWidgetClass"
            glib:is-gtype-struct-for="Win32HostWidget">
      <field name="parent_class">
        <type name="Gtk.WindowClass" c:type="GtkWindowClass"/>
      </field>
      <field name="embed_close">
        <callback name="embed_close">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Win32HostWidget" c:type="UUWin32HostWidget*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="Win32HostWidgetPrivate"
            c:type="UUWin32HostWidgetPrivate"
            disguised="1">
    </record>
    <class name="WindowDecorator"
           c:symbol-prefix="window_decorator"
           c:type="UUWindowDecorator"
           parent="GObject.Object"
           glib:type-name="UUWindowDecorator"
           glib:get-type="uu_window_decorator_get_type"
           glib:type-struct="WindowDecoratorClass">
      <constructor name="new" c:identifier="uu_window_decorator_new">
        <return-value transfer-ownership="full">
          <type name="WindowDecorator" c:type="UUWindowDecorator*"/>
        </return-value>
      </constructor>
      <method name="add_tool" c:identifier="uu_window_decorator_add_tool">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="tool" transfer-ownership="none">
            <type name="DecoratorWidget" c:type="UUDecoratorWidget*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="left" transfer-ownership="none">
            <type name="gfloat" c:type="gfloat"/>
          </parameter>
          <parameter name="top" transfer-ownership="none">
            <type name="gfloat" c:type="gfloat"/>
          </parameter>
          <parameter name="right" transfer-ownership="none">
            <type name="gfloat" c:type="gfloat"/>
          </parameter>
          <parameter name="bottom" transfer-ownership="none">
            <type name="gfloat" c:type="gfloat"/>
          </parameter>
        </parameters>
      </method>
      <method name="attach" c:identifier="uu_window_decorator_attach">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="widget" transfer-ownership="none">
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="detach" c:identifier="uu_window_decorator_detach">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="get_allocation"
              c:identifier="uu_window_decorator_get_allocation">
        <doc xml:whitespace="preserve">Retrieves the decorator's allocation.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="allocation"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:whitespace="preserve">a pointer to a #GtkAllocation to copy to</doc>
            <type name="Gtk.Allocation" c:type="GtkAllocation*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="WindowDecoratorPrivate"
              c:type="UUWindowDecoratorPrivate*"/>
      </field>
    </class>
    <record name="WindowDecoratorClass"
            c:type="UUWindowDecoratorClass"
            glib:is-gtype-struct-for="WindowDecorator">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="WindowDecoratorPrivate"
            c:type="UUWindowDecoratorPrivate"
            disguised="1">
    </record>
    <function name="aes_decrypt" c:identifier="uu_aes_decrypt">
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="data" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="key" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="aes_encrypt" c:identifier="uu_aes_encrypt">
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="data" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="key" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="get_cpu_id" c:identifier="uu_get_cpu_id">
      <return-value transfer-ownership="none">
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
    </function>
    <function name="get_disk_id" c:identifier="uu_get_disk_id">
      <return-value transfer-ownership="none">
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
    </function>
    <function name="get_mac_address" c:identifier="uu_get_mac_address">
      <return-value transfer-ownership="none">
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
    </function>
    <function name="get_machine_id" c:identifier="uu_get_machine_id">
      <return-value transfer-ownership="none">
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
    </function>
    <function name="get_resource_manager"
              c:identifier="uu_get_resource_manager">
      <doc xml:whitespace="preserve">Get the resource manager for the specified database.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">an #UUResourceManager</doc>
        <type name="ResourceManager" c:type="UUResourceManager*"/>
      </return-value>
      <parameters>
        <parameter name="database" transfer-ownership="none">
          <doc xml:whitespace="preserve">the resource database connection</doc>
          <type name="Gda.Connection" c:type="GdaConnection*"/>
        </parameter>
      </parameters>
    </function>
    <function name="is_win7" c:identifier="uu_is_win7">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
    </function>
    <function name="read_pixbuf" c:identifier="uu_read_pixbuf">
      <doc xml:whitespace="preserve">Read an pixbuf from the buffer.</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">a #GdkPixbuf or %NULL on error. Free the returned object with g_object_unref().</doc>
        <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #OrenNCBuffer.</doc>
          <type name="Oren.NCBuffer" c:type="OrenNCBuffer*"/>
        </parameter>
      </parameters>
    </function>
    <function name="set_hand_cursor" c:identifier="uu_set_hand_cursor">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="show_hand" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="sha1sum" c:identifier="uu_sha1sum">
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="data" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="unify_combobox" c:identifier="uu_unify_combobox">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="combobox" transfer-ownership="none">
          <type name="Gtk.ComboBox" c:type="GtkComboBox*"/>
        </parameter>
      </parameters>
    </function>
    <function name="write_pixbuf" c:identifier="uu_write_pixbuf">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <type name="Oren.NCBuffer" c:type="OrenNCBuffer*"/>
        </parameter>
        <parameter name="pixbuf" transfer-ownership="none">
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </parameter>
      </parameters>
    </function>
  </namespace>
</repository>
