<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="Atk" version="1.0"/>
  <include name="GLib" version="2.0"/>
  <include name="GModule" version="2.0"/>
  <include name="GObject" version="2.0"/>
  <include name="Gda" version="5.0"/>
  <include name="Gdk" version="3.0"/>
  <include name="GdkPixbuf" version="2.0"/>
  <include name="Gimo" version="1.0"/>
  <include name="Gio" version="2.0"/>
  <include name="Gtk" version="3.0"/>
  <include name="Oren" version="1.0"/>
  <include name="Pango" version="1.0"/>
  <include name="cairo" version="1.0"/>
  <include name="libxml2" version="2.0"/>
  <package name="UU-1.0"/>
  <namespace name="UU"
             version="1.0"
             shared-library="uutk.dll"
             c:identifier-prefixes="UU"
             c:symbol-prefixes="uu">
    <class name="BaseDecorator"
           c:symbol-prefix="base_decorator"
           c:type="UUBaseDecorator"
           parent="GObject.Object"
           glib:type-name="UUBaseDecorator"
           glib:get-type="uu_base_decorator_get_type"
           glib:type-struct="BaseDecoratorClass">
      <constructor name="new" c:identifier="uu_base_decorator_new">
        <return-value transfer-ownership="full">
          <type name="BaseDecorator" c:type="UUBaseDecorator*"/>
        </return-value>
      </constructor>
      <virtual-method name="attach">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </virtual-method>
      <virtual-method name="detach" invoker="detach">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </virtual-method>
      <virtual-method name="proc" introspectable="0">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="hwnd" transfer-ownership="none">
            <type c:type="HWND"/>
          </parameter>
          <parameter name="msg" transfer-ownership="none">
            <type c:type="UINT"/>
          </parameter>
          <parameter name="wparam" transfer-ownership="none">
            <type c:type="WPARAM"/>
          </parameter>
          <parameter name="lparam" transfer-ownership="none">
            <type c:type="LPARAM"/>
          </parameter>
          <parameter name="result" transfer-ownership="none">
            <type c:type="LRESULT*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="attach" c:identifier="uu_base_decorator_attach">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="widget" transfer-ownership="none">
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="detach" c:identifier="uu_base_decorator_detach">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="get_window" c:identifier="uu_base_decorator_get_window">
        <doc xml:whitespace="preserve">Get the attached window.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GtkWidget</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </method>
      <method name="set_close_mode"
              c:identifier="uu_base_decorator_set_close_mode">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="mode" transfer-ownership="none">
            <type name="CloseMode" c:type="UUCloseMode"/>
          </parameter>
          <parameter name="timeout" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="BaseDecoratorPrivate" c:type="UUBaseDecoratorPrivate*"/>
      </field>
    </class>
    <record name="BaseDecoratorClass"
            c:type="UUBaseDecoratorClass"
            glib:is-gtype-struct-for="BaseDecorator">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="attach">
        <callback name="attach">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="BaseDecorator" c:type="UUBaseDecorator*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="detach">
        <callback name="detach">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="BaseDecorator" c:type="UUBaseDecorator*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="proc" introspectable="0">
        <callback name="proc" introspectable="0">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="BaseDecorator" c:type="UUBaseDecorator*"/>
            </parameter>
            <parameter name="hwnd" transfer-ownership="none">
              <type c:type="HWND"/>
            </parameter>
            <parameter name="msg" transfer-ownership="none">
              <type c:type="UINT"/>
            </parameter>
            <parameter name="wparam" transfer-ownership="none">
              <type c:type="WPARAM"/>
            </parameter>
            <parameter name="lparam" transfer-ownership="none">
              <type c:type="LPARAM"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <type c:type="LRESULT*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="BaseDecoratorPrivate"
            c:type="UUBaseDecoratorPrivate"
            disguised="1">
    </record>
    <class name="BubbleDecorator"
           c:symbol-prefix="bubble_decorator"
           c:type="UUBubbleDecorator"
           parent="BaseDecorator"
           glib:type-name="UUBubbleDecorator"
           glib:get-type="uu_bubble_decorator_get_type"
           glib:type-struct="BubbleDecoratorClass">
      <constructor name="new" c:identifier="uu_bubble_decorator_new">
        <return-value transfer-ownership="full">
          <type name="BubbleDecorator" c:type="UUBubbleDecorator*"/>
        </return-value>
      </constructor>
      <method name="set_target_pos"
              c:identifier="uu_bubble_decorator_set_target_pos">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="x" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="BaseDecorator" c:type="UUBaseDecorator"/>
      </field>
      <field name="priv">
        <type name="BubbleDecoratorPrivate"
              c:type="UUBubbleDecoratorPrivate*"/>
      </field>
    </class>
    <record name="BubbleDecoratorClass"
            c:type="UUBubbleDecoratorClass"
            glib:is-gtype-struct-for="BubbleDecorator">
      <field name="parent_class">
        <type name="BaseDecoratorClass" c:type="UUBaseDecoratorClass"/>
      </field>
    </record>
    <record name="BubbleDecoratorPrivate"
            c:type="UUBubbleDecoratorPrivate"
            disguised="1">
    </record>
    <class name="CellRendererData"
           c:symbol-prefix="cell_renderer_data"
           c:type="UUCellRendererData"
           parent="Gtk.CellRenderer"
           glib:type-name="UUCellRendererData"
           glib:get-type="uu_cell_renderer_data_get_type"
           glib:type-struct="CellRendererDataClass">
      <constructor name="new" c:identifier="uu_cell_renderer_data_new">
        <return-value transfer-ownership="none">
          <type name="Gtk.CellRenderer" c:type="GtkCellRenderer*"/>
        </return-value>
      </constructor>
      <virtual-method name="render_data">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="data" transfer-ownership="none">
            <type name="Gimo.DataStore" c:type="GimoDataStore*"/>
          </parameter>
          <parameter name="cr" transfer-ownership="none">
            <type name="cairo.Context" c:type="cairo_t*"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <type name="Gtk.CellRendererState" c:type="GtkCellRendererState"/>
          </parameter>
        </parameters>
      </virtual-method>
      <property name="data-store" writable="1" transfer-ownership="none">
        <type name="Gimo.DataStore"/>
      </property>
      <field name="parent_instance">
        <type name="Gtk.CellRenderer" c:type="GtkCellRenderer"/>
      </field>
      <field name="priv">
        <type name="CellRendererDataPrivate"
              c:type="UUCellRendererDataPrivate*"/>
      </field>
      <glib:signal name="render-data" when="first">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Gimo.DataStore"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="cairo.Context"/>
          </parameter>
          <parameter name="p1" transfer-ownership="none">
            <type name="Gtk.Widget"/>
          </parameter>
          <parameter name="p2" transfer-ownership="none">
            <type name="cairo.RectangleInt"/>
          </parameter>
          <parameter name="p3" transfer-ownership="none">
            <type name="cairo.RectangleInt"/>
          </parameter>
          <parameter name="p4" transfer-ownership="none">
            <type name="Gtk.CellRendererState"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="CellRendererDataClass"
            c:type="UUCellRendererDataClass"
            glib:is-gtype-struct-for="CellRendererData">
      <field name="parent_class">
        <type name="Gtk.CellRendererClass" c:type="GtkCellRendererClass"/>
      </field>
      <field name="render_data">
        <callback name="render_data">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="CellRendererData" c:type="UUCellRendererData*"/>
            </parameter>
            <parameter name="data" transfer-ownership="none">
              <type name="Gimo.DataStore" c:type="GimoDataStore*"/>
            </parameter>
            <parameter name="cr" transfer-ownership="none">
              <type name="cairo.Context" c:type="cairo_t*"/>
            </parameter>
            <parameter name="width" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="height" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="flags" transfer-ownership="none">
              <type name="Gtk.CellRendererState"
                    c:type="GtkCellRendererState"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="CellRendererDataPrivate"
            c:type="UUCellRendererDataPrivate"
            disguised="1">
    </record>
    <enumeration name="CloseMode"
                 glib:type-name="UUCloseMode"
                 glib:get-type="uu_close_mode_get_type"
                 c:type="UUCloseMode">
      <member name="NONE"
              value="0"
              c:identifier="UU_CLOSE_MODE_NONE"
              glib:nick="NONE"/>
      <member name="LOST_FOCUS"
              value="1"
              c:identifier="UU_CLOSE_MODE_LOST_FOCUS"
              glib:nick="LOST_FOCUS"/>
      <member name="MOUSE_LEAVE"
              value="2"
              c:identifier="UU_CLOSE_MODE_MOUSE_LEAVE"
              glib:nick="MOUSE_LEAVE"/>
    </enumeration>
    <record name="DecoratorButton" c:type="UUDecoratorButton" disguised="1">
    </record>
    <record name="DecoratorWidget" c:type="UUDecoratorWidget" disguised="1">
    </record>
    <class name="ResourceManager"
           c:symbol-prefix="resource_manager"
           c:type="UUResourceManager"
           parent="GObject.Object"
           glib:type-name="UUResourceManager"
           glib:get-type="uu_resource_manager_get_type"
           glib:type-struct="ResourceManagerClass">
      <constructor name="new" c:identifier="uu_resource_manager_new">
        <return-value transfer-ownership="full">
          <type name="ResourceManager" c:type="UUResourceManager*"/>
        </return-value>
        <parameters>
          <parameter name="database" transfer-ownership="none">
            <type name="Gda.Connection" c:type="GdaConnection*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_image"
              c:identifier="uu_resource_manager_get_image"
              throws="1">
        <doc xml:whitespace="preserve">Get an image from the database.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GdkPixbuf</doc>
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:whitespace="preserve">the image name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="database"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Gda.Connection"/>
      </property>
      <property name="refdb"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="ResourceManagerPrivate"
              c:type="UUResourceManagerPrivate*"/>
      </field>
    </class>
    <record name="ResourceManagerClass"
            c:type="UUResourceManagerClass"
            glib:is-gtype-struct-for="ResourceManager">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="ResourceManagerPrivate"
            c:type="UUResourceManagerPrivate"
            disguised="1">
    </record>
    <class name="Win32EmbedWidget"
           c:symbol-prefix="win32_embed_widget"
           c:type="UUWin32EmbedWidget"
           parent="Gtk.Window"
           glib:type-name="UUWin32EmbedWidget"
           glib:get-type="uu_win32_embed_widget_get_type"
           glib:type-struct="Win32EmbedWidgetClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="uu_win32_embed_widget_new">
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="host_hwnd" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </constructor>
      <property name="host-hwnd"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="guint"/>
      </property>
      <field name="window">
        <type name="Gtk.Window" c:type="GtkWindow"/>
      </field>
      <field name="priv">
        <type name="Win32EmbedWidgetPrivate"
              c:type="UUWin32EmbedWidgetPrivate*"/>
      </field>
    </class>
    <record name="Win32EmbedWidgetClass"
            c:type="UUWin32EmbedWidgetClass"
            glib:is-gtype-struct-for="Win32EmbedWidget">
      <field name="parent_class">
        <type name="Gtk.WindowClass" c:type="GtkWindowClass"/>
      </field>
    </record>
    <record name="Win32EmbedWidgetPrivate"
            c:type="UUWin32EmbedWidgetPrivate"
            disguised="1">
    </record>
    <class name="Win32HostWidget"
           c:symbol-prefix="win32_host_widget"
           c:type="UUWin32HostWidget"
           parent="Gtk.Bin"
           glib:type-name="UUWin32HostWidget"
           glib:get-type="uu_win32_host_widget_get_type"
           glib:type-struct="Win32HostWidgetClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="uu_win32_host_widget_new">
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <virtual-method name="embed_close">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </virtual-method>
      <method name="load" c:identifier="uu_win32_host_widget_load">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="application" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="command_line" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <field name="window">
        <type name="Gtk.Bin" c:type="GtkBin"/>
      </field>
      <field name="priv">
        <type name="Win32HostWidgetPrivate"
              c:type="UUWin32HostWidgetPrivate*"/>
      </field>
      <glib:signal name="embed-close" when="first">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="Win32HostWidgetClass"
            c:type="UUWin32HostWidgetClass"
            glib:is-gtype-struct-for="Win32HostWidget">
      <field name="parent_class">
        <type name="Gtk.BinClass" c:type="GtkBinClass"/>
      </field>
      <field name="embed_close">
        <callback name="embed_close">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Win32HostWidget" c:type="UUWin32HostWidget*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="Win32HostWidgetPrivate"
            c:type="UUWin32HostWidgetPrivate"
            disguised="1">
    </record>
    <class name="WindowDecorator"
           c:symbol-prefix="window_decorator"
           c:type="UUWindowDecorator"
           parent="BaseDecorator"
           glib:type-name="UUWindowDecorator"
           glib:get-type="uu_window_decorator_get_type"
           glib:type-struct="WindowDecoratorClass">
      <constructor name="new" c:identifier="uu_window_decorator_new">
        <return-value transfer-ownership="full">
          <type name="WindowDecorator" c:type="UUWindowDecorator*"/>
        </return-value>
      </constructor>
      <method name="add_tool" c:identifier="uu_window_decorator_add_tool">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="tool" transfer-ownership="none">
            <type name="DecoratorWidget" c:type="UUDecoratorWidget*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="left" transfer-ownership="none">
            <type name="gfloat" c:type="gfloat"/>
          </parameter>
          <parameter name="top" transfer-ownership="none">
            <type name="gfloat" c:type="gfloat"/>
          </parameter>
          <parameter name="right" transfer-ownership="none">
            <type name="gfloat" c:type="gfloat"/>
          </parameter>
          <parameter name="bottom" transfer-ownership="none">
            <type name="gfloat" c:type="gfloat"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_allocation"
              c:identifier="uu_window_decorator_get_allocation">
        <doc xml:whitespace="preserve">Retrieves the decorator's allocation.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="allocation"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:whitespace="preserve">a pointer to a #GtkAllocation to copy to</doc>
            <type name="Gtk.Allocation" c:type="GtkAllocation*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="BaseDecorator" c:type="UUBaseDecorator"/>
      </field>
      <field name="priv">
        <type name="WindowDecoratorPrivate"
              c:type="UUWindowDecoratorPrivate*"/>
      </field>
    </class>
    <record name="WindowDecoratorClass"
            c:type="UUWindowDecoratorClass"
            glib:is-gtype-struct-for="WindowDecorator">
      <field name="parent_class">
        <type name="BaseDecoratorClass" c:type="UUBaseDecoratorClass"/>
      </field>
    </record>
    <record name="WindowDecoratorPrivate"
            c:type="UUWindowDecoratorPrivate"
            disguised="1">
    </record>
    <function name="aes_decrypt" c:identifier="uu_aes_decrypt">
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="data" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="key" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="aes_encrypt" c:identifier="uu_aes_encrypt">
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="data" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="key" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="create_blob_from_buffer"
              c:identifier="uu_create_blob_from_buffer">
      <doc xml:whitespace="preserve">Create a Gda blob value from the buffer.</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">the newly created #GValue.  Free-function: gda_value_free</doc>
        <type name="GObject.Value" c:type="GValue*"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <doc xml:whitespace="preserve">an #OrenNCBuffer.</doc>
          <type name="Oren.NCBuffer" c:type="OrenNCBuffer*"/>
        </parameter>
      </parameters>
    </function>
    <function name="create_buffer_from_pixbuf"
              c:identifier="uu_create_buffer_from_pixbuf">
      <doc xml:whitespace="preserve">Create a buffer from the pixbuf.</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">an #OrenNCBuffer or %NULL on error. Free the returned object with g_object_unref().</doc>
        <type name="Oren.NCBuffer" c:type="OrenNCBuffer*"/>
      </return-value>
      <parameters>
        <parameter name="pixbuf" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GdkPixbuf.</doc>
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </parameter>
      </parameters>
    </function>
    <function name="create_pixbuf_from_buffer"
              c:identifier="uu_create_pixbuf_from_buffer">
      <doc xml:whitespace="preserve">Create a pixbuf from the buffer.</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">a #GdkPixbuf or %NULL on error. Free the returned object with g_object_unref().</doc>
        <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <doc xml:whitespace="preserve">an #OrenNCBuffer.</doc>
          <type name="Oren.NCBuffer" c:type="OrenNCBuffer*"/>
        </parameter>
      </parameters>
    </function>
    <function name="get_cpu_id" c:identifier="uu_get_cpu_id">
      <return-value transfer-ownership="none">
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
    </function>
    <function name="get_disk_id" c:identifier="uu_get_disk_id">
      <return-value transfer-ownership="none">
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
    </function>
    <function name="get_mac_address" c:identifier="uu_get_mac_address">
      <return-value transfer-ownership="none">
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
    </function>
    <function name="get_machine_id" c:identifier="uu_get_machine_id">
      <return-value transfer-ownership="none">
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
    </function>
    <function name="get_resource_manager"
              c:identifier="uu_get_resource_manager">
      <doc xml:whitespace="preserve">Get the resource manager for the specified database.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">an #UUResourceManager</doc>
        <type name="ResourceManager" c:type="UUResourceManager*"/>
      </return-value>
      <parameters>
        <parameter name="database" transfer-ownership="none">
          <doc xml:whitespace="preserve">the resource database connection</doc>
          <type name="Gda.Connection" c:type="GdaConnection*"/>
        </parameter>
      </parameters>
    </function>
    <function name="is_win7" c:identifier="uu_is_win7">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
    </function>
    <function name="md5sum" c:identifier="uu_md5sum">
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="data" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="open_single_file" c:identifier="uu_open_single_file">
      <doc xml:whitespace="preserve">Display a file choose dialog to choose a single file.</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">the selected file name or %NULL</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="parent" transfer-ownership="none" allow-none="1">
          <doc xml:whitespace="preserve">a #GtkWidget</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="name" transfer-ownership="none" allow-none="1">
          <doc xml:whitespace="preserve">the initial file name</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="dir" transfer-ownership="none" allow-none="1">
          <doc xml:whitespace="preserve">the initial directory</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="title" transfer-ownership="none" allow-none="1">
          <doc xml:whitespace="preserve">the dialog title</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="filters" transfer-ownership="none" allow-none="1">
          <doc xml:whitespace="preserve">a %NULL-terminated array of strings holding filters</doc>
          <array c:type="gchar**">
            <type name="utf8" c:type="gchar*"/>
          </array>
        </parameter>
      </parameters>
    </function>
    <function name="read_pixbuf" c:identifier="uu_read_pixbuf">
      <doc xml:whitespace="preserve">Read a pixbuf from the buffer.</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">a #GdkPixbuf or %NULL on error. Free the returned object with g_object_unref().</doc>
        <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <doc xml:whitespace="preserve">an #OrenNCBuffer.</doc>
          <type name="Oren.NCBuffer" c:type="OrenNCBuffer*"/>
        </parameter>
      </parameters>
    </function>
    <function name="set_auto_startup" c:identifier="uu_set_auto_startup">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="key_name" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="app_path" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="setup" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="set_hand_cursor" c:identifier="uu_set_hand_cursor">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="show_hand" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="sha1sum" c:identifier="uu_sha1sum">
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="data" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="signal_stop_emission"
              c:identifier="uu_signal_stop_emission">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="object" transfer-ownership="none">
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
        <parameter name="signal" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="unify_combobox" c:identifier="uu_unify_combobox">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="combobox" transfer-ownership="none">
          <type name="Gtk.ComboBox" c:type="GtkComboBox*"/>
        </parameter>
      </parameters>
    </function>
    <function name="write_pixbuf" c:identifier="uu_write_pixbuf">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <type name="Oren.NCBuffer" c:type="OrenNCBuffer*"/>
        </parameter>
        <parameter name="pixbuf" transfer-ownership="none">
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </parameter>
      </parameters>
    </function>
  </namespace>
</repository>
